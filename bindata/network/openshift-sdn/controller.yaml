apiVersion: apps/v1
kind: Deployment
metadata:
  name: sdn-controller
  namespace: openshift-sdn
  annotations:
    kubernetes.io/description: |
      This deployment runs the openshift SDN networking controller.
    release.openshift.io/version: "{{.ReleaseVersion}}"
  labels:
    app: sdn-controller
spec:
  replicas: 2
  selector:
    matchLabels:
      app: sdn-controller
  template:
    metadata:
      labels:
        app: sdn-controller
    spec:
      affinity:
        podAntiAffinity:
           requiredDuringSchedulingIgnoredDuringExecution:
           - labelSelector:
               matchExpressions:
               - key: app
                 operator: In
                 values:
                 - sdn-controller
             topologyKey: kubernetes.io/hostname
      containers:
      - name: sdn-controller
        image: {{.SDNControllerImage}}
        command: ["network-controller"]
        resources:
          requests:
            cpu: 10m
            memory: 50Mi
        env:
        # TODO: bind-mount the kubelet's kubeconfig like the openshift-sdn process
        # need to get the `oc` binary in to the hypershift image first
        - name: KUBERNETES_SERVICE_PORT # allows the controller to communicate with apiserver directly on same host.
          value: "{{.KUBERNETES_SERVICE_PORT}}"
        - name: KUBERNETES_SERVICE_HOST # allows the controller to communicate with apiserver directly on same host.
          value: "{{.KUBERNETES_SERVICE_HOST}}"
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      priorityClassName: "system-cluster-critical"
      restartPolicy: Always
      serviceAccountName: sdn-controller
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoSchedule"
